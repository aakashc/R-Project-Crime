dfPerc$literacyRate <- round(dfPerc$literacyRate,1)
str(dfPerc)
dfPerc$popPerc <- as.numeric(as.character(dfPerc$popPerc))
dfPerc$areaPerc <- as.numeric(as.character(dfPerc$areaPerc))
library(plyr)
dfPerc <- arrange(dfPerc, state)
save(dfPerc, file='data/dfPerc.rda')
# Load Crime% data
load('data/df2012CrimeP.rda')
data <- cbind(df2012CrimeP, dfPerc)
data <- data[,-3]
f_IlltRate <- function(x) 100-x
data <- ddply(data, .(state), transform, illteracyRate=f_IlltRate(literacyRate))
data <- data[,-3]
library(ggplot2)
m <- melt(data, id.vars='state')
png(height=700, width=700,pointsize=25,units='px' file="graph/corerelation.png")
library(corrplot)
png(height=700, width=700,pointsize=25,units='px' file="graph/corerelation.png")
png(height=700, width=700,pointsize=25,units='px', file="graph/corerelation.png")
corrmatrix<-cor(data[,-1])
col <- colorRampPalette(c("#BB4444", "#EE9988", "#FFFFFF", "#77AADD", "#4477AA")) #Color scheme, verbatim from the R Graphics cookbook - Chang
corrplot <- corrplot(corrmatrix, method="shade", shade.col=NA, tl.col="black", tl.srt=45, col=col(200), addCoef.col="black", order="AOE")
dev.off()
png(height=500, width=500,pointsize=25,units='px', file="graph/corerelation.png")
corrmatrix<-cor(data[,-1])
col <- colorRampPalette(c("#BB4444", "#EE9988", "#FFFFFF", "#77AADD", "#4477AA")) #Color scheme, verbatim from the R Graphics cookbook - Chang
corrplot <- corrplot(corrmatrix, method="shade", shade.col=NA, tl.col="black", tl.srt=45, col=col(200), addCoef.col="black", order="AOE")
dev.off()
corrmatrix<-cor(data[,-1])
col <- colorRampPalette(c("#BB4444", "#EE9988", "#FFFFFF", "#77AADD", "#4477AA")) #Color scheme, verbatim from the R Graphics cookbook - Chang
corrplot(corrmatrix, method="shade", shade.col=NA, tl.col="black", tl.srt=45, col=col(200), addCoef.col="black", order="AOE")
m <- melt(data, id.vars='state')
plot5 <- ggplot(m, aes(x=reorder(state,value), y=value, fill=variable)) + geom_bar(stat='identity',width=.6) + coord_flip() + theme_bw() + xlab('States') + ylab('%')
plot5 <- plot5 + theme(axis.text=element_text(size=12,face="bold"),plot.title = element_text(lineheight=.8, face="bold")) + ggtitle('Crime Vs Population/Area/IlletracyRate') +theme(plot.background=element_rect(fill="#FFF9AB"),panel.background=element_rect(fill='#4C2E11'),panel.grid.minor = element_blank(),panel.grid.major=element_blank())+ theme(axis.text=element_text(size=6,face="bold"),plot.title = element_text(lineheight=.8, face="bold"))
plot5
m <- melt(data, id.vars='state')
# Plot - various stats for each state - Crime%, Population%, Area%, Illetracy%
plot5 <- ggplot(m, aes(x=reorder(state,value), y=value, fill=variable)) + geom_bar(stat='identity',width=.6) + coord_flip() + theme_bw() + xlab('States') + ylab('%')
plot5 <- plot5 + theme(axis.text=element_text(size=12,face="bold"),plot.title = element_text(lineheight=.8, face="bold")) + ggtitle('Crime Vs Population/Area/IlletracyRate') +theme(plot.background=element_rect(fill="#FFF9AB"),panel.background=element_rect(fill='#4C2E11'),panel.grid.minor = element_blank(),panel.grid.major=element_blank())+ theme(axis.text=element_text(size=8,face="bold"),plot.title = element_text(lineheight=.8, face="bold"))
plot5
rm(list=ls())
rm(list=ls()) # to remove all objects and clean the workspace
# Read Data
raw <- read.table('data/crimeAgainstWomen.csv', sep=',', check.names=F,header=T,fill=TRUE)
names(raw) <- c('state', 'crimeType', seq(2001,2012,1))
# Remove columns
clean <- raw[,c(1,2,8:14)]
# Remove Rows
clean <- subset(clean,!clean$state=='A & N ISLANDS')
clean <- subset(clean,!clean$state=='D & N HAVELI')
clean <- subset(clean,!clean$state=='PUDUCHERRY')
clean <- subset(clean,!clean$state=='LAKSHADWEEP')
clean <- subset(clean,!clean$state=='DAMAN & DIU')
clean <- subset(clean,!clean$state=='CHANDIGARH')
clean <- subset(clean,!clean$crimeType=='COMMISSION OF SATI PREVENTION ACT')
clean <- subset(clean,!clean$crimeType=='INDECENT REPRESENTATION OF WOMEN (P) ACT')
clean <- subset(clean,!clean$crimeType=='IMPORTATION OF GIRLS FROM FOREIGN COUNTRY')
row.names(clean) <- NULL
# convert to wide format
library(reshape2)
long <- melt(clean, id.vars = c("state", "crimeType"))
wide <- dcast(long, variable+state ~ crimeType)
wide <- wide[,c(2,10:3,1)]
names(wide)[2:10] <- c('rape','kidnapping','insult','immoral','dowry','dowry_deaths','cruelty','assult','year')
names(wide)
str(wide)
wide$rape <- as.numeric(wide$rape)
wide$kidnapping <- as.numeric(wide$kidnapping)
wide$insult <- as.numeric(wide$insult)
wide$immoral <- as.numeric(wide$immoral)
wide$dowry <- as.numeric(wide$dowry)
wide$dowry_deaths <- as.numeric(wide$dowry_deaths)
wide$cruelty <- as.numeric(wide$cruelty)
wide$assult <- as.numeric(wide$assult)
wide$year <- as.numeric(as.character(wide$year))
wide$state <- gsub('ODISHA', 'Orissa', wide$state)
#Function to convert Upper case to Lower
simpleCap <- function(x) { s <- strsplit(x, " ")[[1]]
paste(toupper(substring(s, 1,1)), substring(s, 2), sep="", collapse=" ")}
library(plyr)
wide$state <- tolower(wide$state)
wide$state <- sapply(wide$state, simpleCap)
# Save RDA file for 2012 - to be used for Shiny App
dfs <- subset(wide, year==2012)
row.names(dfs) <- NULL
dfs <- dfs[,-10]
save(dfs, file='shiny/dfs.rda', compress=F, precheck=F)
# Calculate Total Crimes
TotalCrimes <- rowSums((wide[,2:9]))
wide$TotalCrimes <- TotalCrimes
wide <- wide[,c(1:9,11,10)]
# Calcluate Total Crimes for each year
TOTAL <- ddply(wide, .(year), function(x) colSums(x[c(2:10)]))
merge <- rbind.fill(wide,TOTAL)
merge$state <- replace(merge$state, is.na(merge$state), "TOTAL")
longNew <- melt(merge, id.vars = c("year", "state"))
names(longNew)[3:4] <- c('crimeType', 'cases')
###########################33
# Calculate %change of crimes for each state and each year
good<-function(x){((x - x[1])/x[1])*100}
pc06_07 <- ddply(subset(merge, year==2006 | year==2007,c(1,10:11)), .(state), transform, perchange= round(good(TotalCrimes),2))
pc07_08 <- ddply(subset(merge, year==2007 | year==2008,c(1,10:11)), .(state), transform, perchange= round(good(TotalCrimes),2))
pc08_09 <- ddply(subset(merge, year==2008 | year==2009,c(1,10:11)), .(state), transform, perchange= round(good(TotalCrimes),2))
pc09_10 <- ddply(subset(merge, year==2009 | year==2010,c(1,10:11)), .(state), transform, perchange= round(good(TotalCrimes),2))
pc10_11 <- ddply(subset(merge, year==2010 | year==2011,c(1,10:11)), .(state), transform, perchange= round(good(TotalCrimes),2))
pc11_12 <- ddply(subset(merge, year==2011 | year==2012,c(1,10:11)), .(state), transform, perchange= round(good(TotalCrimes),2))
x <- cbind(pc06_07,pc07_08,pc08_09,pc09_10,pc10_11,pc11_12)
y <- x[,c(1,3,4,7,8,11,12,15,16,19,20,23,24)]
z <- subset(y, year.5=='2012')
row.names(z) <- NULL
zz <- z[,c(1,3,5,7,9,11,13)]
names(zz)[2:7] <- c(2007:2012)
# Chart for % change in crimes for each state
m <- melt(zz, id.vars='state')
m$state <- gsub('Pradesh', '', m$state)
m$state <- gsub('Jammu & Kashmir', 'J&K', m$state)
m$state <- gsub('West Bengal', 'WB', m$state)
m$state <- gsub('Tamil Nadu', 'TN', m$state)
m$state <- gsub('Tamil Nadu', 'TN', m$state)
m$state <- gsub('Chhattisgarh', 'Chgarh', m$state)
library(rCharts)
p <- nPlot(value ~ state, group = "variable", data =m, type = "multiBarChart", height=500,width=1200)
p$chart(stacked=TRUE)
p$chart(reduceXTicks = FALSE)
p$xAxis(staggerLabels = TRUE)
#p$xAxis(rotateLabels=-90)
p$save('graph/crimePct.html', cdn = TRUE)
zzz <- melt(zz, id.vars='state')
zzzz<- ddply(melt(zz, id.vars='state'), .(variable), summarise, maxChange = max(value),state=state[which.max(value)])
zzzzz <- ddply(melt(zz, id.vars='state'), .(variable), summarise, minChange = min(value),state=state[which.min(value)])
# States with Maximum Crime Increase in percentage
library(rCharts)
sPlot1 <- nPlot(x = "state", y = "maxChange", group = "variable", data = zzzz, type = "multiBarChart")
sPlot1$save("graph/sPlot1.html",cdn=T)
# States with Maximum Crime Decrease in percentage
sPlot2 <- nPlot(x = "state", y = "minChange", group = "variable", data = zzzzz, type = "multiBarChart")
sPlot2$save("graph/sPlot2.html",cdn=T)
#########################
# Convert to Percentage for all the crimes
rapePct <- round((merge$rape/merge$TotalCrimes)*100,1)
kidnappingPct <- round((merge$kidnapping/merge$TotalCrimes)*100,1)
insultPct <- round((merge$insult/merge$TotalCrimes)*100,1)
immoralPct <- round((merge$immoral/merge$TotalCrimes)*100,1)
dowryPct <- round((merge$dowry/merge$TotalCrimes)*100,1)
dowry_deathsPct <- round((merge$dowry_deaths/merge$TotalCrimes)*100,1)
crueltyPct <- round((merge$cruelty/merge$TotalCrimes)*100,1)
assultPct <- round((merge$assult/merge$TotalCrimes)*100,1)
TotalCrimesPct <- round((merge$TotalCrimes/merge$TotalCrimes)*100,1)
dfPct <- data.frame(rapePct,kidnappingPct,insultPct,immoralPct,dowryPct,dowry_deathsPct,crueltyPct,assultPct,TotalCrimesPct)
# Merging Datasets:
mergedData <- cbind(merge, dfPct)
dfOnlyPct <- mergedData[,c(1,11,12:20)]
dfOnlyCnt <- mergedData[,c(1:11)]
meltPct <- melt(dfOnlyPct, id.vars = c("state", "year"))
meltCnt <- melt(dfOnlyCnt, id.vars = c("state", "year"))
meltCom <- cbind(meltCnt, meltPct$value)
names(meltCom) <- c('state', 'year', 'crimeType', 'count', 'percent')
meltCom$state <- as.factor(meltCom$state)
##############################################
# ArePlot for each crime from year 2006 to year 2012
AreaTotPlot <- nPlot(count~year, group='crimeType', data=subset(meltCom, meltCom$state=="TOTAL"), type="stackedAreaChart")
AreaTotPlot$yAxis(tickFormat = "#!  function(y) { return (y*100).toFixed(0)} !#")
AreaTotPlot$save("graph/AreaTotPlot.html",cdn=T)
# State Map - Crime count for each state
library(googleVis)
stateMap <- gvisGeoChart(data=subset(meltCom, meltCom$crimeType=="TotalCrimes" & meltCom$year==2012 & meltCom$state!='TOTAL'),locationvar="state", colorvar="count",options=list(title="XXX",region='IN',displayMode="region",resolution="provinces",colorAxis="{colors:['grey','yellow','green','blue','orange','red']}",width=600,height=600))
google <- print(stateMap, file="graph/google.html")
##################################################################################
# Find the Top Crime per Year
library(ggplot2)
topCrimeByYr <- ddply(subset(meltCom, meltCom$state!='TOTAL' & meltCom$crimeType!='TotalCrimes'), .(crimeType, year), summarise, maxCrime = max(count),state=state[which.max(count)])
sPlot3 <- ggplot(topCrimeByYr, aes(x = year, y = maxCrime, fill = state)) + geom_bar(stat='identity', position="dodge",width=0.4) + theme_bw() + facet_grid(.~crimeType) + theme(axis.text=element_text(size=7,face="bold"),plot.title = element_text(lineheight=.8, face="bold")) + ggtitle('Top Crime by State and Year')
sPlot3 <- sPlot3 + theme(plot.background=element_rect(fill="#FFF9AB"),panel.background=element_rect(fill='#4C2E11'),panel.grid.minor = element_blank(),panel.grid.major=element_blank())
####################################################################################
# Data Frame Containing data for the year 2012
df2012 <- subset(meltCom, year==2012 & crimeType!='TotalCrimes' & state!='TOTAL')
row.names(df2012) <- NULL
df2012 <- df2012[,c(-2,-4)]
wide2012 <- dcast(df2012, state ~ crimeType )
######################
df2012CrimeP <- subset(meltCom, year==2012 & crimeType=='TotalCrimes')
row.names(df2012CrimeP) <- NULL
df2012CrimeP <- df2012CrimeP[,c(1,4)]
p <- sapply(df2012CrimeP[,2],function(x) ((x/243690)*100))
p <- round(p,1)
df2012CrimeP$perCrime <- p
df2012CrimeP <- df2012CrimeP[-30,c(1,3)]
save(df2012CrimeP, file='data/df2012CrimeP.rda')
#################################################################
# Correlation Plot
library(scales)
cormat <- cor(dfs[c(-1)])
cm <- melt(cormat)
names(cm)=c("Var1","Var2","CorrelationCoefficient")
cplot = rPlot(Var2 ~ Var1, color = 'CorrelationCoefficient', data = cm, type = 'tile', height = 600)
cplot$addParams(height = 450, width=1000)
cplot$guides("{color: {scale: {type: gradient2, lower: 'red',  middle: 'white', upper: 'blue',midpoint: 0}}}")
cplot$guides(y = list(numticks = length(unique(cm$Var1))))
cplot$guides(x = list(numticks = 8))
cplot$addParams(staggerLabels=TRUE)
cplot$save("graph/corrmatplot.html",cdn=T)
# heatmap of variables and State UTs
hmMelt <- ddply(melt(dfs),.(variable),transform,rescale=rescale(value))
names(hmMelt)=c("state","type","count","rescale")
hmap <- rPlot(state ~ type, color = 'rescale', data = hmMelt, type = 'tile')
hmap$addParams(height = 600, width=800)
hmap$guides(reduceXTicks = FALSE)
hmap$guides("{color: {scale: {type: gradient, lower: 'white', upper: 'red'}}}")
hmap$guides(y = list(numticks = length(unique(hmMelt$state))))
hmap$guides(x = list(numticks = 10))
hmap$save("graph/hmap.html",cdn=T)
# Clustering:
set.seed(200)
kmeansdata <- kmeans(dfs[c(-1)],4)
meanvars <- aggregate(dfs[c(-1)],by=list(kmeansdata$cluster),FUN=mean)
clust <- data.frame(dfs, kmeansdata$cluster)
dPlots <- dPlot(x="state", y="kmeansdata.cluster",groups="kmeansdata.cluster",data=clust,type="bar",width=500,height=800,bounds = list(x=50, y=10, width=400, height=400))
dPlots$yAxis(type="addCategoryAxis")
dPlots$xAxis(type="addCategoryAxis",orderRule="kmeansdata.cluster")
dPlots$save("graph/dPlots.html",cdn=T)
##########################################
rm(list=ls())
# LIbrary to read Excel File
library('XLConnect')
# Read columns from the file
cities <- readWorksheetFromFile('data/city_crime.xls', sheet='Sheet1', region='E84:G136', header=F)
cities[is.na(cities)] <- ''
cities <- paste0(cities$Col1, cities$Col2, cities$Col3)
cities <- gsub('\\(C.*\\)','',cities)
cities <- gsub('-','',cities)
cities <- gsub('VIJAYAW','VIJAYAWADA',cities)
femalePop <- readWorksheetFromFile('data/city_crime.xls', sheet='Sheet1', region='M84:M136', header=F)
rape <- readWorksheetFromFile('data/city_crime.xls', sheet='Sheet1', region='N84:N136', header=F)
kidnapping <- readWorksheetFromFile('data/city_crime.xls', sheet='Sheet1', region='Q84:Q136', header=F)
insult <- readWorksheetFromFile('data/city_crime.xls', sheet='Sheet1', region='M226:M278', header=F)
immoral <- readWorksheetFromFile('data/city_crime.xls', sheet='Sheet1', region='I369:I421', header=F)
dowry <- readWorksheetFromFile('data/city_crime.xls', sheet='Sheet1', region='Q369:Q421', header=F)
dowry_deaths <- readWorksheetFromFile('data/city_crime.xls', sheet='Sheet1', region='V84:V136', header=F)
cruelty <- readWorksheetFromFile('data/city_crime.xls', sheet='Sheet1', region='Y84:Y136', header=F)
assult <- readWorksheetFromFile('data/city_crime.xls', sheet='Sheet1', region='J226:J278', header=F)
cdata <- data.frame(cities,femalePop,rape,kidnapping,insult,immoral,dowry,dowry_deaths,cruelty,assult)
names(cdata)[2:10] <- c('femalePop','rape','kidnapping','insult','immoral','dowry','dowry_deaths','cruelty','assult')
# Type Conversion of the columns
str(cdata)
cdata$femalePop <- as.numeric(cdata$femalePop)
cdata$rape <- as.numeric(cdata$rape)
cdata$kidnapping <- as.numeric(cdata$kidnapping)
cdata$insult <- as.numeric(cdata$insult)
cdata$immoral <- as.numeric(cdata$immoral)
cdata$dowry <- as.numeric(cdata$dowry)
cdata$dowry_deaths <- as.numeric(cdata$dowry_deaths)
cdata$cruelty <- as.numeric(cdata$cruelty)
cdata$assult <- as.numeric(cdata$assult)
# Save the file as rda - to be used for Shiny App
dfc <- cdata[,-2]
save(dfc, file='shiny/dfc.rda', compress=F, precheck=F)
# Reading Female population so as to calculate Crime Density
cdata$femalePop <- cdata$femalePop*100000
TotalCrimeCities <- rowSums((cdata[,3:10]))
cdata$TotalCrimeCities <- TotalCrimeCities
crimeDensity <- round((cdata$TotalCrimeCities/cdata$femalePop)*100,3)
cdata$crimeDensity <- crimeDensity
citiesByCrimeDensity <- cdata[order(-cdata$crimeDensity),c(1,11,12)]
row.names(citiesByCrimeDensity) <- NULL
citiesByTotalCrime <- cdata[order(-cdata$TotalCrimeCities),c(1,11,12)]
row.names(citiesByTotalCrime) <- NULL
library(reshape2)
# Melt the dataset
melting <- melt(cdata, id.vars='cities')
library(ggplot2)
# Plot - City Ranks By Total Number of Cases
x <- subset(cdata, select=c(1,11))
m <- melt(x, id.vars='cities')
cityPlot1 <- ggplot(m)+ geom_bar(aes(x=reorder(cities, value),y=value),stat='identity',fill=rownames(m)) +coord_flip() + theme_bw() + xlab('Cities') + ylab('Number of Cases') + ggtitle('City Ranks by Total Number of Cases')
cityPlot1 <- cityPlot1 + theme(plot.background=element_rect(fill="#FFF9AB"),panel.background=element_rect(fill='#4C2E11'),panel.grid.minor = element_blank(),panel.grid.major=element_blank()) + theme(axis.text=element_text(size=6,face="bold"),plot.title = element_text(lineheight=.8, face="bold"))
# Plot - City Ranks By Crime Density
y <- subset(cdata, select=c(1,12))
n <- melt(y, id.vars='cities')
cityPlot2 <- ggplot(n)+ geom_bar(aes(x=reorder(cities, value),y=value), stat='identity',fill=rownames(m)) +coord_flip()+ theme_bw() + xlab('Cities') + ylab('Crime Density') + ggtitle('City Ranks By Crime Density')
cityPlot2 <- cityPlot2 + theme(plot.background=element_rect(fill="#FFF9AB"),panel.background=element_rect(fill='#4C2E11'),panel.grid.minor = element_blank(),panel.grid.major=element_blank())+ theme(axis.text=element_text(size=6,face="bold"),plot.title = element_text(lineheight=.8, face="bold"))
##########
# Plot - Top Cities for each Crime Type
library(sqldf)
crimeTypeMelt <- subset(melting, melting$variable!='femalePop' & melting$variable!='crimeDensity' & melting$variable!='TotalCrimeCities')
query <- sqldf('select cities, variable, MAX(value) as Count from crimeTypeMelt group by variable')
cityPlot3 <- ggplot(query, aes(x=variable, y=Count, fill=cities)) + geom_bar(stat='identity',width=.3) + theme_bw() + xlab('Crime Types') + ylab('Number of Cases') + ggtitle('Top Cities for each Crime Type')
cityPlot3 <- cityPlot3 + theme(plot.background=element_rect(fill="#FFF9AB"),panel.background=element_rect(fill='#4C2E11'),panel.grid.minor = element_blank(),panel.grid.major=element_blank())+ theme(axis.text=element_text(size=8,face="bold"),plot.title = element_text(lineheight=.8, face="bold"))
cityPlot3
rm(list=ls()) # to remove all objects and clean the workspace
library(XML)
url <- 'http://en.wikipedia.org/wiki/States_and_union_territories_of_India'
tab <- readHTMLTable(url)
states<-tab[["States of India"]]
subS <- states[,c(2,4,5,10)]
ut<-tab[["Union Territories"]]
subU <- ut[6,c(2,4,8)]
row.names(subU) <- NULL
subU$Name <- gsub('National Capital Territory of Delhi', 'Delhi', subU$Name)
colnames(subU) <- c('state', 'population','literacyRate')
levels(subS$Name)[20]<-"Orissa"
colnames(subS) <- c('state', 'population','area', 'literacyRate')
library(plyr)
merge <- rbind.fill(subS,subU)
merge$area <- gsub(',','',merge$area)
merge$population <- gsub(',','',merge$population)
str(merge)
merge$state <- as.factor(merge$state)
merge$population <- as.numeric(as.character(merge$population))
merge$area <- as.numeric(as.character(merge$area))
merge$literacyRate <- as.numeric(as.character(merge$literacyRate))
str(merge)
merge[29,3] <- 1043
####################################
library(scales)
popPerc <- percent(merge$population/1270272105)
popPerc <- gsub('%', '', popPerc)
areaPerc <- percent(merge$area/2973190)
areaPerc <- gsub('%', '', areaPerc)
dfPerc <- data.frame(merge[,c(1,4)], popPerc, areaPerc)
gsub('%', '', dfPerc)
dfPerc$literacyRate <- round(dfPerc$literacyRate,1)
str(dfPerc)
dfPerc$popPerc <- as.numeric(as.character(dfPerc$popPerc))
dfPerc$areaPerc <- as.numeric(as.character(dfPerc$areaPerc))
library(plyr)
dfPerc <- arrange(dfPerc, state)
save(dfPerc, file='data/dfPerc.rda')
# Load Crime% data
load('data/df2012CrimeP.rda')
data <- cbind(df2012CrimeP, dfPerc)
data <- data[,-3]
f_IlltRate <- function(x) 100-x
data <- ddply(data, .(state), transform, illteracyRate=f_IlltRate(literacyRate))
data <- data[,-3]
library(ggplot2)
m <- melt(data, id.vars='state')
# Plot - various stats for each state - Crime%, Population%, Area%, Illetracy%
plot5 <- ggplot(m, aes(x=reorder(state,value), y=value, fill=variable)) + geom_bar(stat='identity',width=.6) + coord_flip() + theme_bw() + xlab('States') + ylab('%')
plot5 <- plot5 + theme(axis.text=element_text(size=12,face="bold"),plot.title = element_text(lineheight=.8, face="bold")) + ggtitle('Crime Vs Population/Area/IlletracyRate') +theme(plot.background=element_rect(fill="#FFF9AB"),panel.background=element_rect(fill='#4C2E11'),panel.grid.minor = element_blank(),panel.grid.major=element_blank())+ theme(axis.text=element_text(size=8,face="bold"),plot.title = element_text(lineheight=.8, face="bold"))
plot5
#######################
library(corrplot)
# Corerelation plot for Crime%, Population%, Area%, Illetracy%
corrmatrix<-cor(data[,-1])
col <- colorRampPalette(c("#BB4444", "#EE9988", "#FFFFFF", "#77AADD", "#4477AA")) #Color scheme, verbatim from the R Graphics cookbook - Chang
corrplot(corrmatrix, method="shade", shade.col=NA, tl.col="black", tl.srt=45, col=col(200), addCoef.col="black", order="AOE")
rm(list=ls()) # to remove all objects and clean the workspace
rm(list=ls()) # to remove all objects and clean the workspace
rm(list=ls())
# LIbrary to read Excel File
library('XLConnect')
# Read columns from the file
cities <- readWorksheetFromFile('data/city_crime.xls', sheet='Sheet1', region='E84:G136', header=F)
cities[is.na(cities)] <- ''
cities <- paste0(cities$Col1, cities$Col2, cities$Col3)
cities <- gsub('\\(C.*\\)','',cities)
cities <- gsub('-','',cities)
cities <- gsub('VIJAYAW','VIJAYAWADA',cities)
femalePop <- readWorksheetFromFile('data/city_crime.xls', sheet='Sheet1', region='M84:M136', header=F)
rape <- readWorksheetFromFile('data/city_crime.xls', sheet='Sheet1', region='N84:N136', header=F)
kidnapping <- readWorksheetFromFile('data/city_crime.xls', sheet='Sheet1', region='Q84:Q136', header=F)
insult <- readWorksheetFromFile('data/city_crime.xls', sheet='Sheet1', region='M226:M278', header=F)
immoral <- readWorksheetFromFile('data/city_crime.xls', sheet='Sheet1', region='I369:I421', header=F)
dowry <- readWorksheetFromFile('data/city_crime.xls', sheet='Sheet1', region='Q369:Q421', header=F)
dowry_deaths <- readWorksheetFromFile('data/city_crime.xls', sheet='Sheet1', region='V84:V136', header=F)
cruelty <- readWorksheetFromFile('data/city_crime.xls', sheet='Sheet1', region='Y84:Y136', header=F)
assult <- readWorksheetFromFile('data/city_crime.xls', sheet='Sheet1', region='J226:J278', header=F)
cdata <- data.frame(cities,femalePop,rape,kidnapping,insult,immoral,dowry,dowry_deaths,cruelty,assult)
names(cdata)[2:10] <- c('femalePop','rape','kidnapping','insult','immoral','dowry','dowry_deaths','cruelty','assult')
# Type Conversion of the columns
str(cdata)
cdata$femalePop <- as.numeric(cdata$femalePop)
cdata$rape <- as.numeric(cdata$rape)
cdata$kidnapping <- as.numeric(cdata$kidnapping)
cdata$insult <- as.numeric(cdata$insult)
cdata$immoral <- as.numeric(cdata$immoral)
cdata$dowry <- as.numeric(cdata$dowry)
cdata$dowry_deaths <- as.numeric(cdata$dowry_deaths)
cdata$cruelty <- as.numeric(cdata$cruelty)
cdata$assult <- as.numeric(cdata$assult)
# Save the file as rda - to be used for Shiny App
dfc <- cdata[,-2]
save(dfc, file='shiny/dfc.rda', compress=F, precheck=F)
# Reading Female population so as to calculate Crime Density
cdata$femalePop <- cdata$femalePop*100000
TotalCrimeCities <- rowSums((cdata[,3:10]))
cdata$TotalCrimeCities <- TotalCrimeCities
crimeDensity <- round((cdata$TotalCrimeCities/cdata$femalePop)*100,3)
cdata$crimeDensity <- crimeDensity
citiesByCrimeDensity <- cdata[order(-cdata$crimeDensity),c(1,11,12)]
row.names(citiesByCrimeDensity) <- NULL
citiesByTotalCrime <- cdata[order(-cdata$TotalCrimeCities),c(1,11,12)]
row.names(citiesByTotalCrime) <- NULL
library(reshape2)
# Melt the dataset
melting <- melt(cdata, id.vars='cities')
library(ggplot2)
x <- subset(cdata, select=c(1,11))
m <- melt(x, id.vars='cities')
ggplot(m)+ geom_bar(aes(x=reorder(cities, value),y=value),stat='identity',fill=rownames(m)) +coord_flip()
ggplot(m)+ geom_bar(aes(x=reorder(cities, value),y=value),stat='identity',fill=rainbow()) +coord_flip()
ggplot(m)+ geom_bar(aes(x=reorder(cities, value),y=value),stat='identity',fill='black') +coord_flip()
ggplot(m)+ geom_bar(aes(x=reorder(cities, value),y=value),stat='identity',fill=c('red','yellow','white')) +coord_flip()
ggplot(m)+ geom_bar(aes(x=reorder(cities, value),y=value),stat='identity') +coord_flip()
ggplot(m)+ geom_bar(aes(x=reorder(cities, value),y=value),stat='identity') +coord_flip()+scale_color_manual(values=c('red','yellow','green'))
ggplot(m)+ geom_bar(aes(x=reorder(cities, value),y=value),stat='identity',fill='red') +coord_flip()+scale_color_manual(values=c('red','yellow','green'))
ggplot(m)+ geom_bar(aes(x=reorder(cities, value),y=value),stat='identity') +coord_flip()+scale_color_manual(values=c('red','yellow','green'))
ggplot(m)+ geom_bar(aes(x=reorder(cities, value),y=value),stat='identity',fill=value) +coord_flip()+scale_color_manual(values=c('red','yellow','green'))
ggplot(m)+ geom_bar(aes(x=reorder(cities, value),y=value),stat='identity',fill='value') +coord_flip()+scale_color_manual(values=c('red','yellow','green'))
View(m)
ggplot(m)+ geom_bar(aes(x=reorder(cities, value),y=value),stat='identity',fill=as.factor(value)) +coord_flip()+scale_color_manual(values=c('red','yellow','green'))
ggplot(m)+ geom_bar(aes(x=reorder(cities, value),y=value),stat='identity',fill=as.factor(value)) +coord_flip()
ggplot(m)+ geom_bar(aes(x=reorder(cities, value),y=value),stat='identity',fill=as.factor(m$value)) +coord_flip()
ggplot(m)+ geom_bar(aes(x=reorder(cities, value),y=value),stat='identity',fill=as.factor(m$value)) +coord_flip()+scale_color_manual(values=c('red','yellow','green'))
ggplot(m)+ geom_bar(aes(x=reorder(cities, value),y=value),stat='identity',fill=m$value) +coord_flip()
View(x)
sort(x$TotalCrimeCities)
x[order(-x$TotalCrimeCities)]
x[order(x$TotalCrimeCities),]
x[order(-x$TotalCrimeCities),]
y <- x[order(-x$TotalCrimeCities),]
View(y)
row.names(y) <- NULL
View(y)
library(Hmisc)
cut2(y,3)
cut2(y,m=10)
cut2(y)
str(y)
cut(y)
cut(y$TotalCrimeCities)
cut(y,y$TotalCrimeCities)
cut(y$TotalCrimeCities,g=3)
cut2(y$TotalCrimeCities,g=3)
c <- cut2(y$TotalCrimeCities,g=3)
y$c <- c
View(y)
str(y)
mm <- melt(y, id.vars='cities')
View(mm)
ggplot(m)+ geom_bar(aes(x=reorder(cities, value),y=value),stat='identity')
View(y)
mm <- melt(y, id.vars=.(cities,c))
rm(list=ls())
# LIbrary to read Excel File
library('XLConnect')
# Read columns from the file
cities <- readWorksheetFromFile('data/city_crime.xls', sheet='Sheet1', region='E84:G136', header=F)
cities[is.na(cities)] <- ''
cities <- paste0(cities$Col1, cities$Col2, cities$Col3)
cities <- gsub('\\(C.*\\)','',cities)
cities <- gsub('-','',cities)
cities <- gsub('VIJAYAW','VIJAYAWADA',cities)
femalePop <- readWorksheetFromFile('data/city_crime.xls', sheet='Sheet1', region='M84:M136', header=F)
rape <- readWorksheetFromFile('data/city_crime.xls', sheet='Sheet1', region='N84:N136', header=F)
kidnapping <- readWorksheetFromFile('data/city_crime.xls', sheet='Sheet1', region='Q84:Q136', header=F)
insult <- readWorksheetFromFile('data/city_crime.xls', sheet='Sheet1', region='M226:M278', header=F)
immoral <- readWorksheetFromFile('data/city_crime.xls', sheet='Sheet1', region='I369:I421', header=F)
dowry <- readWorksheetFromFile('data/city_crime.xls', sheet='Sheet1', region='Q369:Q421', header=F)
dowry_deaths <- readWorksheetFromFile('data/city_crime.xls', sheet='Sheet1', region='V84:V136', header=F)
cruelty <- readWorksheetFromFile('data/city_crime.xls', sheet='Sheet1', region='Y84:Y136', header=F)
assult <- readWorksheetFromFile('data/city_crime.xls', sheet='Sheet1', region='J226:J278', header=F)
cdata <- data.frame(cities,femalePop,rape,kidnapping,insult,immoral,dowry,dowry_deaths,cruelty,assult)
names(cdata)[2:10] <- c('femalePop','rape','kidnapping','insult','immoral','dowry','dowry_deaths','cruelty','assult')
# Type Conversion of the columns
str(cdata)
cdata$femalePop <- as.numeric(cdata$femalePop)
cdata$rape <- as.numeric(cdata$rape)
cdata$kidnapping <- as.numeric(cdata$kidnapping)
cdata$insult <- as.numeric(cdata$insult)
cdata$immoral <- as.numeric(cdata$immoral)
cdata$dowry <- as.numeric(cdata$dowry)
cdata$dowry_deaths <- as.numeric(cdata$dowry_deaths)
cdata$cruelty <- as.numeric(cdata$cruelty)
cdata$assult <- as.numeric(cdata$assult)
# Save the file as rda - to be used for Shiny App
dfc <- cdata[,-2]
save(dfc, file='shiny/dfc.rda', compress=F, precheck=F)
# Reading Female population so as to calculate Crime Density
cdata$femalePop <- cdata$femalePop*100000
TotalCrimeCities <- rowSums((cdata[,3:10]))
cdata$TotalCrimeCities <- TotalCrimeCities
crimeDensity <- round((cdata$TotalCrimeCities/cdata$femalePop)*100,3)
cdata$crimeDensity <- crimeDensity
citiesByCrimeDensity <- cdata[order(-cdata$crimeDensity),c(1,11,12)]
row.names(citiesByCrimeDensity) <- NULL
citiesByTotalCrime <- cdata[order(-cdata$TotalCrimeCities),c(1,11,12)]
row.names(citiesByTotalCrime) <- NULL
library(reshape2)
# Melt the dataset
melting <- melt(cdata, id.vars='cities')
library(ggplot2)
# Plot - City Ranks By Total Number of Cases
x <- subset(cdata, select=c(1,11))
m <- melt(x, id.vars='cities')
cityPlot1 <- ggplot(m)+ geom_bar(aes(x=reorder(cities, value),y=value),stat='identity',fill=rownames(m)) +coord_flip() + theme_bw() + xlab('Cities') + ylab('Number of Cases') + ggtitle('City Ranks by Total Number of Cases')
cityPlot1 <- cityPlot1 + theme(plot.background=element_rect(fill="#FFF9AB"),panel.background=element_rect(fill='#4C2E11'),panel.grid.minor = element_blank(),panel.grid.major=element_blank()) + theme(axis.text=element_text(size=6,face="bold"),plot.title = element_text(lineheight=.8, face="bold"))
# Plot - City Ranks By Crime Density
y <- subset(cdata, select=c(1,12))
n <- melt(y, id.vars='cities')
cityPlot2 <- ggplot(n)+ geom_bar(aes(x=reorder(cities, value),y=value), stat='identity',fill=rownames(m)) +coord_flip()+ theme_bw() + xlab('Cities') + ylab('Crime Density') + ggtitle('City Ranks By Crime Density')
cityPlot2 <- cityPlot2 + theme(plot.background=element_rect(fill="#FFF9AB"),panel.background=element_rect(fill='#4C2E11'),panel.grid.minor = element_blank(),panel.grid.major=element_blank())+ theme(axis.text=element_text(size=6,face="bold"),plot.title = element_text(lineheight=.8, face="bold"))
##########
# Plot - Top Cities for each Crime Type
library(sqldf)
crimeTypeMelt <- subset(melting, melting$variable!='femalePop' & melting$variable!='crimeDensity' & melting$variable!='TotalCrimeCities')
query <- sqldf('select cities, variable, MAX(value) as Count from crimeTypeMelt group by variable')
cityPlot3 <- ggplot(query, aes(x=variable, y=Count, fill=cities)) + geom_bar(stat='identity',width=.3) + theme_bw() + xlab('Crime Types') + ylab('Number of Cases') + ggtitle('Top Cities for each Crime Type')
cityPlot3 <- cityPlot3 + theme(plot.background=element_rect(fill="#FFF9AB"),panel.background=element_rect(fill='#4C2E11'),panel.grid.minor = element_blank(),panel.grid.major=element_blank())+ theme(axis.text=element_text(size=8,face="bold"),plot.title = element_text(lineheight=.8, face="bold"))
cityPlot3
rm(list=ls())
